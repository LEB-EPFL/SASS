/**
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to randomly populate the field with
 * with a 3D distribution of fluorophores whose images are computed
 * according to the Gibson-Lanni PSF>
 *
 */

import ch.epfl.leb.sass.simulator.generators.realtime.SimEngine;
import ch.epfl.leb.sass.simulator.generators.realtime.Microscope;
import ch.epfl.leb.sass.simulator.generators.realtime.RNG;
import ch.epfl.leb.sass.simulator.generators.realtime.FluorophoreProperties;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.dynamics.FluorophoreDynamics;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.dynamics.PalmDynamics;
import ch.epfl.leb.sass.simulator.generators.realtime.obstructors.commands.GenerateFiducialsRandom2D;
import ch.epfl.leb.sass.simulator.generators.realtime.backgrounds.commands.GenerateUniformBackground;
import ch.epfl.leb.sass.simulator.generators.realtime.components.*;
import ch.epfl.leb.sass.simulator.generators.realtime.psfs.GibsonLanniPSF;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.commands.GenerateFluorophoresGrid3D;
import java.util.ArrayList;

// The seed determines the outputs of the random number generator.
RNG.setSeed(42);

// We will build the simulation by first setting up the components and
// then assembling them together to form a microscope.

// Camera
Camera.Builder cameraBuilder = new Camera.Builder();

cameraBuilder.nX(64); // Number of pixels in x
cameraBuilder.nY(64); // Number of pixels in y
cameraBuilder.readoutNoise(1.6); // Standard deviation, electrons
cameraBuilder.darkCurrent(0.06); 
cameraBuilder.quantumEfficiency(0.8);
cameraBuilder.aduPerElectron(2.2);
cameraBuilder.emGain(0);       // Set to zero for CMOS cameras
cameraBuilder.baseline(100);   // ADU
cameraBuilder.pixelSize(6.45); // microns

// Objective
Objective.Builder objectiveBuilder = new Objective.Builder();

objectiveBuilder.NA(1.3); // Numerical aperture
objectiveBuilder.mag(60); // Magnification

// Laser
Laser.Builder laserBuilder = new Laser.Builder();

laserBuilder.currentPower(0.0);
laserBuilder.minPower(0.0);
laserBuilder.maxPower(500.0);

// Stage
Stage.Builder stageBuilder = new Stage.Builder();

stageBuilder.x(0);
stageBuilder.y(0);

// Place the stage at a position of -2 microns. Because we model an
// inverted microscope, this the makes the plane z = 2 the focal
// plane.
stageBuilder.z(-2); // Coverslip surface is at z = 0

// Create a Gibson-Lanni point spread function.
GibsonLanniPSF.Builder psfBuilder = new GibsonLanniPSF.Builder();

psfBuilder.numBasis(100);  // No. of Bessel functions used
psfBuilder.numSamples(1000); // No. of samples made of the phase
psfBuilder.oversampling(2);  // Should be >= 2
psfBuilder.sizeX(1024);      // Number of pixels of PSF grid in x
psfBuilder.sizeY(1024);      // Number of pixels of PSF grid in y
psfBuilder.ns(1.33);         // Sample refractive index
psfBuilder.ng0(1.5);         // Coverslip design refractive index
psfBuilder.ng(1.5);          // Coverslip actual refractive index
psfBuilder.ni0(1.5);       // Immersion medium design refractive index
psfBuilder.ni(1.5);        // Immersion medium actual refractive index
psfBuilder.ti0(150);         // Immersion medium design thickness
psfBuilder.tg0(170);         // Coverslip design thickness
psfBuilder.tg(170);          // Coverslip actual thickness
psfBuilder.resPSF(0.0215);   // Resolution of the calculation grid.
                             // Should be >= 5 times the object space
                             // pixel size in microns.

// Fluorophore dynamics and properties; rates are in units of 1/frames
PalmDynamics.Builder fluorPropBuilder = new PalmDynamics.Builder();

fluorPropBuilder.signal(2500); // Photons per fluorophore per frame
fluorPropBuilder.wavelength(0.6); // Wavelength, microns
fluorPropBuilder.kA(100);      // Activation rate
fluorPropBuilder.kB(0);        // Bleaching rate
fluorPropBuilder.kD1(0.065);   // Transition rate to first dark state
fluorPropBuilder.kD2(0.013);   // Transition rate to second dark state
fluorPropBuilder.kR1(0.004);   // Return rate from first dark state
fluorPropBuilder.kR2(0.157);   // Return rate from second dark state

// Fluorophore positions on a square grid
GenerateFluorophoresGrid3D.Builder fluorPosBuilder = new GenerateFluorophoresGrid3D.Builder();
fluorPosBuilder.spacing(8); // pixels
fluorPosBuilder.zLow(0);    // 0 microns -> coverslip
fluorPosBuilder.zHigh(4);   // 4 microns above coverslip

// Add fiducials to the field of view at a random location.
// We use a 2D fiducial command to place fiducials only in the current
// focal plane, which is determined by the stage's z-position.
GenerateFiducialsRandom2D.Builder fidBuilder = new GenerateFiducialsRandom2D.Builder();
fidBuilder.numFiducials(2); // Set to zero if you don't want fiducials
fidBuilder.brightness(3000); // photons per frame

// Add a constant background
GenerateUniformBackground.Builder backgroundBuilder = new GenerateUniformBackground.Builder();
backgroundBuilder.backgroundSignal(10); // photons



// Now that we have setup all the components, we assemble the
// microscope and the simulator.
Microscope microscope = new Microscope(
    cameraBuilder,
    laserBuilder,
    objectiveBuilder,
    psfBuilder,
    stageBuilder,
    fluorPosBuilder,
    fluorPropBuilder,
    fidBuilder,
    backgroundBuilder);

// The simulation engine
SimEngine generator = new SimEngine(microscope);

// set laser power
generator.setControlSignal(0.03);

// simulate frames
for (i=0;i<1000;i++) {
    if (i%200==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// save and show; uncomment these lines to save and display stack
//generator.saveStack(new File("generated_stack.tif"));
//import ij.ImagePlus;
//ImagePlus ip = new ImagePlus("Simulation output", generator.getStack());
//ip.show();
//ip.updateAndRepaintWindow();

//System.exit(0); // uncomment if you want termination immediately



