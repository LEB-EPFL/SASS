/**
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to randomly populate the field with
 * with a 2D distribution of fluorophores.
 *
 */

import ch.epfl.leb.sass.simulator.generators.realtime.SimEngine;
import ch.epfl.leb.sass.simulator.generators.realtime.Microscope;
import ch.epfl.leb.sass.simulator.generators.realtime.RNG;
import ch.epfl.leb.sass.simulator.generators.realtime.FluorophoreProperties;
import ch.epfl.leb.sass.simulator.generators.realtime.Obstructor;
import ch.epfl.leb.sass.simulator.generators.realtime.components.*;
import ch.epfl.leb.sass.simulator.generators.realtime.psfs.Gaussian2D;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.PalmProperties;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.commands.GenerateFluorophoresGrid2D;
import java.util.ArrayList;

RNG.setSeed(42);

// We will build the simulation by first setting up the components and
// then assembling them together to form a microscope.

// Camera
Camera.Builder cameraBuilder = new Camera.Builder();

cameraBuilder.nX(32); // Number of pixels in x
cameraBuilder.nY(32); // Number of pixels in y
cameraBuilder.acqSpeed(100);     // Frames per second
cameraBuilder.readoutNoise(1.6); // Standard deviation, electrons
cameraBuilder.darkCurrent(0.06); 
cameraBuilder.quantumEfficiency(0.8);
cameraBuilder.aduPerElectron(2.2);
cameraBuilder.emGain(0);       // Set to zero for CMOS cameras
cameraBuilder.baseline(100);   // ADU
cameraBuilder.pixelSize(6.45); // microns

// Objective
Objective.Builder objectiveBuilder = new Objective.Builder();

objectiveBuilder.NA(1.3);
objectiveBuilder.mag(60); // Magnification

// Laser
Laser.Builder laserBuilder = new Laser.Builder();

laserBuilder.currentPower(0.0);
laserBuilder.minPower(0.0);
laserBuilder.maxPower(500.0);

// Stage
Stage.Builder stageBuilder = new Stage.Builder();
stageBuilder.x(0);
stageBuilder.y(0);
stageBuilder.z(0); // Coverslip surface is at z = 0

// PSF, create a 2D Gaussian point-spread function
Gaussian2D.Builder psfBuilder = new Gaussian2D.Builder();

// Fluorophores: all properties in units per frame
FluorophoreProperties fluo = new PalmProperties(
		    2500,  // photons per fluorophore
		    0.600, // wavelength, microns
                    50,    // background
                    100,   //ka
                    0,     // kb
                    7.8/1.2/100.0, // kd1
                    0.2*7.8/1.2/100.0, // kd2
                    0.4/100.0, //kr1
                    15.7/100.0); // kr2

// Fluorophore positions on a square grid
GenerateFluorophoresGrid2D.Builder posBuilder = new GenerateFluorophoresGrid2D.Builder();
posBuilder.spacing(4); // pixels
		
// Add a gold bead to the field of view at random location.
// Leave the obstructors list empty if you do not want any beads.
import ch.epfl.leb.sass.simulator.generators.realtime.obstructors.GoldBeads;
ArrayList obstructors = new ArrayList();
Obstructor beads = new GoldBeads(1, cameraBuilder.build(), 3000);
obstructors.add(beads);

// The microscope and the simulator
Microscope microscope(
    cameraBuilder,
    laserBuilder,
    objectiveBuilder,
    psfBuilder,
    stageBuilder,
    fluorBuilder,
    fluorProp,
    obstructors
)

// The simulation engine
SimEngine generator = new SimEngine(microscope);

// set laser power
generator.setControlSignal(0.03);

// simulate frames
for (i=0;i<10000;i++) {
    if (i%1000==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// save and show; uncomment these lines to save and display stack
generator.saveStack(new File("generated_stack.tif"));
//import ij.ImagePlus;
//ImagePlus ip = new ImagePlus("Simulation output", generator.getStack());
//ip.show();
//ip.updateAndRepaintWindow();

//System.exit(0); // uncomment if you want termination immediately
