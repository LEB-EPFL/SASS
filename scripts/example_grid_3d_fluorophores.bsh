/**
 * Copyright (C) 2017-2018 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to populate the field with a 3D
 * distribution of fluorophores arranged on a square grid. The axial
 * positions of the fluorophores ascend in a step-wise fashion.
 *
 */

import ch.epfl.leb.sass.simulator.internal.DefaultSimulator;
import ch.epfl.leb.sass.models.Microscope;
import ch.epfl.leb.sass.models.photophysics.FluorophoreDynamics;
import ch.epfl.leb.sass.models.photophysics.internal.PalmDynamics;
import ch.epfl.leb.sass.models.obstructors.internal.commands.GenerateFiducialsRandom2D;
import ch.epfl.leb.sass.models.backgrounds.internal.commands.GenerateUniformBackground;
import ch.epfl.leb.sass.models.components.*;
import ch.epfl.leb.sass.models.components.internal.*;
import ch.epfl.leb.sass.models.psfs.internal.Gaussian3D;
import ch.epfl.leb.sass.models.fluorophores.internal.commands.GenerateFluorophoresGrid3D;
import ch.epfl.leb.sass.utils.RNG;

// The seed determines the outputs of the random number generator.
RNG.setSeed(42);

// We will build the simulation by first setting up the components and
// then assembling them together to form a microscope.

// Camera
DefaultCamera.Builder cameraBuilder = new DefaultCamera.Builder();

cameraBuilder.nX(32); // Number of pixels in x
cameraBuilder.nY(32); // Number of pixels in y
cameraBuilder.readoutNoise(1.6); // Standard deviation, electrons
cameraBuilder.darkCurrent(0.06); 
cameraBuilder.quantumEfficiency(0.8);
cameraBuilder.aduPerElectron(2.2);
cameraBuilder.emGain(0);       // Set to zero for CMOS cameras
cameraBuilder.baseline(100);   // ADU
cameraBuilder.pixelSize(6.45); // microns

// Objective
Objective.Builder objectiveBuilder = new Objective.Builder();

objectiveBuilder.NA(1.3); // Numerical aperture
objectiveBuilder.mag(60); // Magnification

// Laser
Laser.Builder laserBuilder = new Laser.Builder();

laserBuilder.currentPower(0.0);
laserBuilder.minPower(0.0);
laserBuilder.maxPower(500.0);

// Stage
Stage.Builder stageBuilder = new Stage.Builder();

stageBuilder.x(0);
stageBuilder.y(0);

// Place the stage at a position of -2 microns. Because we model an
// inverted microscope, this the makes the plane z = 2 the focal
// plane.
stageBuilder.z(-2); // Coverslip surface is at z = 0

// PSF, create a 2D Gaussian point-spread function
Gaussian3D.Builder psfBuilder = new Gaussian3D.Builder();

// Create a 3D Gaussian point-spread function
Gaussian3D.Builder builder = new Gaussian3D.Builder();

// Fluorophore dynamics and properties; rates are in units of 1/frames
PalmDynamics.Builder fluorPropBuilder = new PalmDynamics.Builder();

fluorPropBuilder.signal(2500); // Photons per fluorophore per frame
fluorPropBuilder.wavelength(0.6); // Wavelength, microns
fluorPropBuilder.kA(100);      // Activation rate
fluorPropBuilder.kB(0);        // Bleaching rate
fluorPropBuilder.kD1(0.065);   // Transition rate to first dark state
fluorPropBuilder.kD2(0.013);   // Transition rate to second dark state
fluorPropBuilder.kR1(0.004);   // Return rate from first dark state
fluorPropBuilder.kR2(0.157);   // Return rate from second dark state

// Fluorophore positions on a square grid
GenerateFluorophoresGrid3D.Builder fluorPosBuilder = new GenerateFluorophoresGrid3D.Builder();
fluorPosBuilder.spacing(4); // pixels
fluorPosBuilder.zLow(0);    // 0 microns -> coverslip
fluorPosBuilder.zHigh(4);   // 4 microns above coverslip

// Add fiducials to the field of view at a random location.
// We use a 2D fiducial command to place fiducials only in the current
// focal plane, which is determined by the stage's z-position.
GenerateFiducialsRandom2D.Builder fidBuilder = new GenerateFiducialsRandom2D.Builder();
fidBuilder.numFiducials(2); // Set to zero if you don't want fiducials
fidBuilder.brightness(3000); // photons per frame

// Add a constant background
GenerateUniformBackground.Builder backgroundBuilder = new GenerateUniformBackground.Builder();
backgroundBuilder.backgroundSignal(10); // photons



// Now that we have setup all the components, we assemble the
// microscope and the simulator.
Microscope microscope = new Microscope(
    cameraBuilder,
    laserBuilder,
    objectiveBuilder,
    psfBuilder,
    stageBuilder,
    fluorPosBuilder,
    fluorPropBuilder,
    fidBuilder,
    backgroundBuilder);

// The simulation engine
DefaultSimulator generator = new DefaultSimulator(microscope);

// set laser power
generator.setControlSignal(0.03);

// simulate frames
for (i=0;i<10000;i++) {
    if (i%1000==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// save and show; uncomment these lines to save and display stack
//generator.saveStack(new File("generated_stack.tif"));
