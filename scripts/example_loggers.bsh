 /**
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to use the loggers provided by SASS.
 *
 */

import ch.epfl.leb.sass.simulator.loggers.StateLogger;
import ch.epfl.leb.sass.simulator.loggers.PositionLogger;
import ch.epfl.leb.sass.simulator.generators.realtime.psfs.Gaussian2D;
import ch.epfl.leb.sass.simulator.generators.realtime.*;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.PalmProperties;
import java.util.ArrayList;

RNG.setSeed(1);

// Obtain a reference to the state logger and enable it
StateLogger stateLogger = StateLogger.getInstance();
stateLogger.setPerformLogging(true);

// Do the same for the position logger
PositionLogger positionLogger = PositionLogger.getInstance();
positionLogger.setPerformLogging(true);

// *** Initalize generator from the ground up ***
Camera camera = new Camera(
    30, //res_x
    30, //res_y
    100, //acq_speed, 
    1.6, //readout_noise, 
    0.06, //dark_current, 
    0.8, //quantum_efficiency, 
    2.2,  // ADU_per_electron
    0,    // EM_gain
    100,  // baseline, ADU 
    6.45 * 1e-6, //pixel_size, 
    1.4, //NA, 
    680 * 1e-9, //wavelength, 
    60); //magnification)

// fluorophores: all properties in units per frame
FluorophoreProperties fluo = new PalmProperties(
    2500, // signal
    50, // background
    100, //ka
    0, // kb
    7.8/1.2/100.0, // kd1
    0.2*7.8/1.2/100.0, // kd2
    0.4/100.0, //kr1
    15.7/100.0); // kr2

// laser
Laser laser = new Laser(
    0.0, // start
    500.0, // max
    0.0); // min

// Create a 2D Gaussian point-spread function
double fwhm = camera.fwhm_digital; // From the Airy disk
Gaussian2D gauss2D = new Gaussian2D(fwhm);

// generate emitters 
// create a grid
ArrayList emitters = FluorophoreGenerator.generateFluorophoresGrid2D(
    4, // spacing in pixels
    camera,
    gauss2D,
    fluo);

// Positions can be logged after fluorophore creation.
positionLogger.setFilename("emitter_positions.csv");
positionLogger.saveLogFile();

// assemble the device and generator
Device device = new Device(camera, fluo, laser, emitters, null);
STORMsim generator = new STORMsim(device);

// set laser power
generator.setControlSignal(0.03);

// simulate frames
for (i=0;i<10000;i++) {
    if (i%1000==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// Save the stack
//generator.saveStack(new File("generated_stack.tif"));

// Save the state transitions
stateLogger.setFilename("state_transitions.csv");
stateLogger.saveLogFile();

