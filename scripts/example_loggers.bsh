 /**
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to use the loggers provided by SASS.
 *
 */

import ch.epfl.leb.sass.simulator.loggers.StateLogger;
import ch.epfl.leb.sass.simulator.loggers.PositionLogger;
import ch.epfl.leb.sass.simulator.generators.realtime.SimEngine;
import ch.epfl.leb.sass.simulator.generators.realtime.Microscope;
import ch.epfl.leb.sass.simulator.generators.realtime.RNG;
import ch.epfl.leb.sass.simulator.generators.realtime.FluorophoreProperties;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.dynamics.FluorophoreDynamics;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.dynamics.PalmDynamics;
import ch.epfl.leb.sass.simulator.generators.realtime.obstructors.commands.GenerateFiducialsRandom2D;
import ch.epfl.leb.sass.simulator.generators.realtime.backgrounds.commands.GenerateUniformBackground;
import ch.epfl.leb.sass.simulator.generators.realtime.components.*;
import ch.epfl.leb.sass.simulator.generators.realtime.psfs.Gaussian2D;
import ch.epfl.leb.sass.simulator.generators.realtime.fluorophores.commands.GenerateFluorophoresRandom2D;
import java.util.ArrayList;

// The seed determines the outputs of the random number generator.
RNG.setSeed(42);

// Obtain a reference to the state logger and enable it
StateLogger stateLogger = StateLogger.getInstance();
stateLogger.setPerformLogging(true);

// Do the same for the position logger
PositionLogger positionLogger = PositionLogger.getInstance();
positionLogger.setPerformLogging(true);

// We will build the simulation by first setting up the components and
// then assembling them together to form a microscope.

// Camera
Camera.Builder cameraBuilder = new Camera.Builder();

cameraBuilder.nX(32); // Number of pixels in x
cameraBuilder.nY(32); // Number of pixels in y
cameraBuilder.readoutNoise(1.6); // Standard deviation, electrons
cameraBuilder.darkCurrent(0.06); 
cameraBuilder.quantumEfficiency(0.8);
cameraBuilder.aduPerElectron(2.2);
cameraBuilder.emGain(0);       // Set to zero for CMOS cameras
cameraBuilder.baseline(100);   // ADU
cameraBuilder.pixelSize(6.45); // microns

// Objective
Objective.Builder objectiveBuilder = new Objective.Builder();

objectiveBuilder.NA(1.3); // Numerical aperture
objectiveBuilder.mag(60); // Magnification

// Laser
Laser.Builder laserBuilder = new Laser.Builder();

laserBuilder.currentPower(0.0);
laserBuilder.minPower(0.0);
laserBuilder.maxPower(500.0);

// Stage
Stage.Builder stageBuilder = new Stage.Builder();

stageBuilder.x(0);
stageBuilder.y(0);
stageBuilder.z(0); // Coverslip surface is at z = 0

// PSF, create a 2D Gaussian point-spread function
Gaussian2D.Builder psfBuilder = new Gaussian2D.Builder();

// Fluorophore dynamics and properties; rates are in units of 1/frames
PalmDynamics.Builder fluorPropBuilder = new PalmDynamics.Builder();

fluorPropBuilder.signal(2500); // Photons per fluorophore per frame
fluorPropBuilder.wavelength(0.6); // Wavelength, microns
fluorPropBuilder.kA(100);      // Activation rate
fluorPropBuilder.kB(0);        // Bleaching rate
fluorPropBuilder.kD1(0.065);   // Transition rate to first dark state
fluorPropBuilder.kD2(0.013);   // Transition rate to second dark state
fluorPropBuilder.kR1(0.004);   // Return rate from first dark state
fluorPropBuilder.kR2(0.157);   // Return rate from second dark state

// Fluorophore positions on a square grid
GenerateFluorophoresRandom2D.Builder fluorPosBuilder = new GenerateFluorophoresRandom2D.Builder();
fluorPosBuilder.numFluors(25); // Number of fluorophores
		
// Add fiducials to the field of view at a random location
GenerateFiducialsRandom2D.Builder fidBuilder = new GenerateFiducialsRandom2D.Builder();
fidBuilder.numFiducials(2); // Set to zero if you don't want fiducials
fidBuilder.brightness(3000); // photons per frame

// Add a constant background
GenerateUniformBackground.Builder backgroundBuilder = new GenerateUniformBackground.Builder();
backgroundBuilder.backgroundSignal(10); // photons

// Now that we have setup all the components, we assemble the
// microscope and the simulator.
Microscope microscope = new Microscope(
    cameraBuilder,
    laserBuilder,
    objectiveBuilder,
    psfBuilder,
    stageBuilder,
    fluorPosBuilder,
    fluorPropBuilder,
    fidBuilder,
    backgroundBuilder);

// The simulation engine
SimEngine generator = new SimEngine(microscope);

// set laser power
generator.setControlSignal(0.03);

// simulate frames
for (i=0;i<10000;i++) {
    if (i%1000==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// Save the stack
generator.saveStack(new File("generated_stack.tif"));

// Save the fluorophore positions.
positionLogger.setFilename("fluorophore_positions.csv");
positionLogger.saveLogFile();

// Save the state transitions
stateLogger.setFilename("state_transitions.csv");
stateLogger.saveLogFile();

