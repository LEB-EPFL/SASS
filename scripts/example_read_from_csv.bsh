/**
 * Copyright (C) 2017-2018 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne.
 *
 * This script demonstrates how to populate a field with fluorophores
 * whose positions are defined in a CSV file.
 *
 */

import ch.epfl.leb.sass.simulator.internal.DefaultSimulator;
import ch.epfl.leb.sass.models.Microscope;
import ch.epfl.leb.sass.models.photophysics.FluorophoreDynamics;
import ch.epfl.leb.sass.models.photophysics.internal.SimpleDynamics;
import ch.epfl.leb.sass.models.obstructors.internal.commands.GenerateFiducialsRandom2D;
import ch.epfl.leb.sass.models.backgrounds.internal.commands.GenerateUniformBackground;
import ch.epfl.leb.sass.models.components.*;
import ch.epfl.leb.sass.models.components.internal.*;
import ch.epfl.leb.sass.models.psfs.internal.Gaussian2D;
import ch.epfl.leb.sass.models.fluorophores.internal.commands.GenerateFluorophoresFromCSV;
import ch.epfl.leb.sass.utils.RNG;

// The seed determines the outputs of the random number generator.
RNG.setSeed(42);

// We will build the simulation by first setting up the components and
// then assembling them together to form a microscope.

// Camera
DefaultCamera.Builder cameraBuilder = new DefaultCamera.Builder();

cameraBuilder.nX(64); // Number of pixels in x
cameraBuilder.nY(64); // Number of pixels in y
cameraBuilder.readoutNoise(1.6); // Standard deviation, electrons
cameraBuilder.darkCurrent(0.06); 
cameraBuilder.quantumEfficiency(0.8);
cameraBuilder.aduPerElectron(2.2);
cameraBuilder.emGain(0);       // Set to zero for CMOS cameras
cameraBuilder.baseline(100);   // ADU
cameraBuilder.pixelSize(6.45); // microns

// Objective
Objective.Builder objectiveBuilder = new Objective.Builder();

objectiveBuilder.NA(1.4); // Numerical aperture
objectiveBuilder.mag(60); // Magnification

// Laser
Laser.Builder laserBuilder = new Laser.Builder();

laserBuilder.currentPower(0.0);
laserBuilder.minPower(0.0);
laserBuilder.maxPower(500.0);

// Stage
Stage.Builder stageBuilder = new Stage.Builder();

stageBuilder.x(0);
stageBuilder.y(0);
stageBuilder.z(0); // Coverslip surface is at z = 0

// PSF, create a 2D Gaussian point-spread function
Gaussian2D.Builder psfBuilder = new Gaussian2D.Builder();

// Fluorophore dynamics and properties; rates are in units of 1/frames
SimpleDynamics.Builder fluorPropBuilder = new SimpleDynamics.Builder();

fluorPropBuilder.signal(2500); // Photons per fluorophore per frame
fluorPropBuilder.wavelength(0.68); // Wavelength, microns
fluorPropBuilder.tOn(3);           // Mean on time
fluorPropBuilder.tOff(100);        // Mean off time
fluorPropBuilder.tBl(10000);       // Mean bleaching time

// Generate the flourophores from the CSV file
File csvFile = new File("label_pix_sass.csv");
GenerateFluorophoresFromCSV.Builder fluorPosBuilder = new GenerateFluorophoresFromCSV.Builder();
fluorPosBuilder.file(csvFile);  // The file containing the locations.
fluorPosBuilder.rescale(false); // Rescale positions to fit image?

// Add fiducials to the field of view at a random location
GenerateFiducialsRandom2D.Builder fidBuilder = new GenerateFiducialsRandom2D.Builder();
fidBuilder.numFiducials(2); // Set to zero if you don't want fiducials
fidBuilder.brightness(3000); // photons per frame

// Add a constant background
GenerateUniformBackground.Builder backgroundBuilder = new GenerateUniformBackground.Builder();
backgroundBuilder.backgroundSignal(10); // photons



// Now that we have setup all the components, we assemble the
// microscope and the simulator.
Microscope microscope = new Microscope(
    cameraBuilder,
    laserBuilder,
    objectiveBuilder,
    psfBuilder,
    stageBuilder,
    fluorPosBuilder,
    fluorPropBuilder,
    fidBuilder,
    backgroundBuilder);

// The simulation engine
DefaultSimulator generator = new DefaultSimulator(microscope);

// set laser power
generator.setControlSignal(0.01);

// simulate frames
for (i=0;i<1000;i++) {
    if (i%200==0) {
		System.out.println(i);
	}
	generator.getNextImage();
}

// Save the stack
//generator.saveStack(new File("generated_stack.tif"));
