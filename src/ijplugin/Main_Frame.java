/*
 * Copyright (C) 2017 Laboratory of Experimental Biophysics
 * Ecole Polytechnique Federale de Lausanne
 *
 * Author: Marcel Stefko
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ijplugin;

import simulator.generators.realtime.STORMsim;
import ij.IJ;
import ij.ImagePlus;
import ij.plugin.frame.PlugInFrame;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Main FIJI plugin frame.
 * @author Marcel Stefko
 */
public class Main_Frame extends PlugInFrame {
    App app;
    /**
     * Creates new form MainFrame
     * @param title title of the window
     */
    public Main_Frame(String title) {
        super(title);
        initComponents();
    }
    
    /**
     * Initialize the new frame
     */
    public Main_Frame() {
        super("STORMsim");
        setSize(200, 200);
        initComponents();
        setVisible(true);
        InitSettingsFrame f = new InitSettingsFrame(null, false, this);
        f.setVisible(true);

        
    }
    
    /**
     * Show the frame and initialize backend.
     * @param arg
     */
    @Override
    public void run(String arg) {
        
    }
    
    public void setApp(App app) {
        this.app = app;
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        setpointEntry = new java.awt.TextField();
        startSimButton = new java.awt.Button();
        stopSimButton = new java.awt.Button();
        saveCsvButton = new java.awt.Button();

        setMinimumSize(new java.awt.Dimension(260, 180));
        setTitle("STORMsim");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        label1.setText("Setpoint:");

        setpointEntry.setText("100");

        startSimButton.setLabel("Start");
        startSimButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startSimButtonMouseClicked(evt);
            }
        });

        stopSimButton.setLabel("Stop");
        stopSimButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopSimButtonMouseClicked(evt);
            }
        });

        saveCsvButton.setLabel("Save CSV");
        saveCsvButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveCsvButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(startSimButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(stopSimButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(setpointEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(saveCsvButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(setpointEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startSimButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopSimButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveCsvButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the plugin
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
    }//GEN-LAST:event_exitForm

    private void stopSimButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopSimButtonMouseClicked
        try {
            app.stopSimulating();
        } catch (RuntimeException ex) {
            IJ.showMessage("Error in simulation stop.", ex.getMessage());
            startSimButton.setEnabled(true);
            return;
        }
        
        startSimButton.setEnabled(true);
        stopSimButton.setEnabled(false);
        setpointEntry.setEnabled(true);
    }//GEN-LAST:event_stopSimButtonMouseClicked

    private void startSimButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startSimButtonMouseClicked
        try {
            app.setSetpoint(Double.parseDouble(setpointEntry.getText()));
            app.startSimulating();
        } catch (RuntimeException ex) {
            IJ.showMessage("Error in simulation start.", ex.getMessage());
            stopSimButton.setEnabled(true);
            return;
        }
        startSimButton.setEnabled(false);
        stopSimButton.setEnabled(true);
        setpointEntry.setEnabled(false);
    }//GEN-LAST:event_startSimButtonMouseClicked

    private void saveCsvButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveCsvButtonMouseClicked
        JFileChooser fc = new JFileChooser();
        int returnVal;
        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        //set a default filename 
        fc.setSelectedFile(new File("tester_output.csv"));
        //Set an extension filter
        fc.setFileFilter(new FileNameExtensionFilter("CSV file","csv"));
        returnVal = fc.showSaveDialog(null);
        if  (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File csv_output = fc.getSelectedFile();
        app.saveToCsv(csv_output);
    }//GEN-LAST:event_saveCsvButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frame("main").setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label label1;
    private java.awt.Button saveCsvButton;
    private java.awt.TextField setpointEntry;
    private java.awt.Button startSimButton;
    private java.awt.Button stopSimButton;
    // End of variables declaration//GEN-END:variables
}
