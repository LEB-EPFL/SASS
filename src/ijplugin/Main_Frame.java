/*
 * Copyright (C) 2017 stefko
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ijplugin;

import algorithm_tester.generators.realtime.STORMsim;
import ij.ImagePlus;
import ij.plugin.frame.PlugInFrame;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Main FIJI plugin frame.
 * @author Marcel Stefko
 */
public class Main_Frame extends PlugInFrame {
    App app;
    /**
     * Creates new form MainFrame
     * @param title title of the window
     */
    public Main_Frame(String title) {
        super(title);
        initComponents();
    }
    
    /**
     * Initialize the new frame
     */
    public Main_Frame() {
        super("AAA");
        initComponents();
    }
    
    /**
     * Show the frame and initialize backend.
     * @param arg
     */
    @Override
    public void run(String arg) {
        setSize(200, 200);
        setVisible(true);
        app = new App();
        
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel5 = new java.awt.Panel();
        analyzerSettingsButton = new java.awt.Button();
        panel4 = new java.awt.Panel();
        label1 = new java.awt.Label();
        setpointEntry = new java.awt.TextField();
        panel1 = new java.awt.Panel();
        startSimButton = new java.awt.Button();
        stopSimButton = new java.awt.Button();
        panel2 = new java.awt.Panel();
        saveCsvButton = new java.awt.Button();

        setMinimumSize(new java.awt.Dimension(240, 180));
        setPreferredSize(new java.awt.Dimension(240, 180));
        setResizable(false);
        setTitle("STORMsim");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        analyzerSettingsButton.setLabel("Analyzer settings");
        analyzerSettingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analyzerSettingsButtonMouseClicked(evt);
            }
        });
        panel5.add(analyzerSettingsButton);

        add(panel5);

        label1.setText("Setpoint:");
        panel4.add(label1);

        setpointEntry.setText("100");
        panel4.add(setpointEntry);

        add(panel4);

        panel1.setMinimumSize(new java.awt.Dimension(10, 30));

        startSimButton.setLabel("Start");
        startSimButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startSimButtonMouseClicked(evt);
            }
        });
        panel1.add(startSimButton);

        stopSimButton.setLabel("Stop");
        stopSimButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopSimButtonMouseClicked(evt);
            }
        });
        panel1.add(stopSimButton);

        add(panel1);

        saveCsvButton.setLabel("Save CSV");
        saveCsvButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveCsvButtonMouseClicked(evt);
            }
        });
        panel2.add(saveCsvButton);

        add(panel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the plugin
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
    }//GEN-LAST:event_exitForm

    private void analyzerSettingsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyzerSettingsButtonMouseClicked
        app.analyzerSetupDialog();
    }//GEN-LAST:event_analyzerSettingsButtonMouseClicked

    private void stopSimButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopSimButtonMouseClicked
        app.stopSimulating();
        startSimButton.setEnabled(true);
        stopSimButton.setEnabled(false);
        setpointEntry.setEnabled(true);
        analyzerSettingsButton.setEnabled(true);
    }//GEN-LAST:event_stopSimButtonMouseClicked

    private void startSimButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startSimButtonMouseClicked
        startSimButton.setEnabled(false);
        stopSimButton.setEnabled(true);
        analyzerSettingsButton.setEnabled(false);
        app.setSetpoint(Double.parseDouble(setpointEntry.getText()));
        setpointEntry.setEnabled(false);
        app.startSimulating();
    }//GEN-LAST:event_startSimButtonMouseClicked

    private void saveCsvButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveCsvButtonMouseClicked
        JFileChooser fc = new JFileChooser();
        int returnVal;
        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        //set a default filename 
        fc.setSelectedFile(new File("tester_output.csv"));
        //Set an extension filter
        fc.setFileFilter(new FileNameExtensionFilter("CSV file","csv"));
        returnVal = fc.showSaveDialog(null);
        if  (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File csv_output = fc.getSelectedFile();
        app.saveToCsv(csv_output);
    }//GEN-LAST:event_saveCsvButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frame("main").setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button analyzerSettingsButton;
    private java.awt.Label label1;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.Panel panel4;
    private java.awt.Panel panel5;
    private java.awt.Button saveCsvButton;
    private java.awt.TextField setpointEntry;
    private java.awt.Button startSimButton;
    private java.awt.Button stopSimButton;
    // End of variables declaration//GEN-END:variables
}
